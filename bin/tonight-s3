#!/usr/bin/env node

var queue = require('queue-async'),
    AWS = require('aws-sdk'),
    moment = require('moment'),
    fs = require('fs'),
    later = require('later'),
    argv = require('minimist')(process.argv.slice(2), {
        boolean: 'now'
    }),
    debug = require('debug')('tonight-s3'),
    flatten = require('lodash.flatten')
    http = require('http');

AWS.config.update({
    accessKeyId: process.env.AWS_ACCESS_KEY,
    secretAccessKey: process.env.AWS_SECRET_KEY
});

process.on('uncaughtException', function(err) {
    debug('Caught exception: ' + err);
});

var bucketConfig = { params: { Bucket: 'dctn' } },
    s3bucket = new AWS.S3(bucketConfig);

s3bucket.putObject({
        Key: 'last-run',
        Body: (+new Date()).toString()
    }, function(err, data) {
        if (err) throw err;
        else { console.log(arguments); }
    });

debug('tonight-s3 startup');

var sources = [
    require('../sources/dc9'),
    require('../sources/blackcat'),
    require('../sources/rockandroll'),
    require('../sources/velvetlounge'),
    require('../sources/fortreno'),
    require('../sources/hamilton'),
    require('../sources/sixthandi'),
    // require('../sources/930'),
    // require('../sources/ustreet'),
];

if (argv.now) {
    pull();
} else {
    // confusingly means: 'the tenth minute of every hour'
    // cron coding is silly and annoying.
    var s = later.parse.recur().every(10).minute();
    later.setInterval(pull, s);
}


function pull() {
    var q = queue(2);

    debug('loading sources');
    sources.forEach(function(source) {
        q.defer(source.load);
    });

    q.awaitAll(function(err, res) {
        console.log(res);
        debug('done');
        if (err) debug('with error: ' + err.toString());
        if (err) throw err;
        var all_results = flatten(res);
        debug(all_results.length + ' results');
        var just_today = all_results.filter(inTimeRange);
        debug(just_today.length + ' shows today');
        saveToday(just_today);
    });
}

function saveToday(data) { // fight the break of dawn

    if (process.env.DRY) {
        console.log(JSON.stringify(data, null, 2));
        return;
    }

    var key = todayStamp(),
        body = JSON.stringify(data);

    debug('saving data');

    s3bucket.putObject({
        Key: key,
        Body: body,
        ACL: 'public-read',
        ContentType: 'application/json'
    }, function(err, data) {
        if (err) {
            debug("Error uploading data: ", err);
        } else {
            debug("Successfully uploaded data to " + key);
        }
    });
}

function todayStamp() {
    return moment().format('YYYY-MM-DD') + '.json';
}

function inTimeRange(show) {
    var now = moment();
    if (argv.when) {
        now = moment(argv.when, 'YYYYMMDD');
        console.log('showing dates for ', now.format());
    }
    if (show.times && show.times.length) {
        var date = show.times[0].stamp;
        var today_start = now.clone().startOf('day');
        var today_end = now.clone().endOf('day');
        return (date >= +today_start.toDate() && date <= +today_end.toDate());
    }
}

var server = http.createServer(function(req, res) {
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end('tonight-source worker.');
});

server.listen(process.env.PORT || 3000);
